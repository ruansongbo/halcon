<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>*关闭窗口</c>
<l>dev_close_window ()</l>
<l>dev_close_window ()</l>
<c>*打开指定大小、颜色背景的窗口</c>
<l>dev_open_window (0, 0, 768/2, 576/2, 'black', WindowHandle1)</l>
<l>dev_update_pc ('off')</l>
<l>dev_update_window ('off')</l>
<l>dev_update_var ('off')</l>
<l>dev_update_time ('off')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c>*</c>
<c>* Calibrate the camera.（标定相机）步骤一</c>
<c>*</c>
<c>* 标定板描述文件</c>
<l>CaltabName := 'C:/Users/bb/Desktop/cal/halcon.descr'</l>
<c>* make sure that the file 'CaltabDescrName' is in the current directory,</c>
<c>* the HALCONROOT/calib directory, or use an absolut path</c>
<c>*初始相机参数：焦距、畸变系数Kappa,Sx,Sy,Cx,Cy,ImageWidth,ImageHeight</c>
<l>StartCamPar := [0.008,0,0.0000086,0.0000086,1024,768,2048,1536]</l>
<c>*物体在空间坐标系中的位姿数组</c>
<l>NStartPose := []</l>
<c>*行角点数组</c>
<l>NRow := []</l>
<c>*列角点数组</c>
<l>NCol := []</l>
<c>*X、Y、Z从标定表文件获取计算值</c>
<l>caltab_points (CaltabName, X, Y, Z)</l>
<c>*创建空的图像元组</c>
<l>gen_empty_obj (Images)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">ImageFiles := []</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">ImageFiles[0] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-1.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="2">ImageFiles[1] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-2.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="3">ImageFiles[2] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-3.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="4">ImageFiles[3] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-11.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="5">ImageFiles[4] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-16.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="6">ImageFiles[5] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-17.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="7">ImageFiles[6] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-13.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="8">ImageFiles[7] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-18.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="9">ImageFiles[8] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-9.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="10">ImageFiles[9] := 'C:/Users/bb/Desktop/cal/calib-3d-coord-10.png'</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to 10 - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<c>    *将单个Image加入元组Images中</c>
<l>    concat_obj (Images, Image, Images)</l>
<c>    *显示Image</c>
<l>    dev_display (Image)</l>
<c>    *在图像中找到标定板的区域：图像，标定板描述文件，滤波核大小，二值化值</c>
<l>    find_caltab (Image, Caltab, CaltabName, 3, 112, 5)</l>
<c>    *设置区域颜色：绿色</c>
<l>    dev_set_color ('green')</l>
<c>    *显示图像中标定板的区域</c>
<l>    dev_display (Caltab)</l>
<c>    *(核心函数：搜寻图像的原始点)在图像中找到标定板的各个角点坐标和初始位姿</c>
<l>    find_marks_and_pose (Image, Caltab, CaltabName, StartCamPar, 128, 10, 18, 0.9, 10, 150, RCoord, CCoord, StartPose)</l>
<c>    *设置颜色：红色</c>
<l>    dev_set_color ('red')</l>
<c>    *在窗口上圆形标记角点的位置</c>
<l>    disp_circle (WindowHandle1, RCoord, CCoord, gen_tuple_const(|RCoord|,1.5))</l>
<c>    *一个图像位姿加入位姿元组</c>
<l>NStartPose := [NStartPose,StartPose]</l>
<c>*所有图像角点行坐标数组相连</c>
<l>NRow := [NRow,RCoord]</l>
<c>*所有图像角点列坐标数组相连</c>
<l>NCol := [NCol,CCoord]</l>
<l>stop()</l>
<l>endfor</l>
<l>dev_update_time ('on')</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop()</l>
<c></c>
<c>*图像的数目</c>
<l> NumImages := 10</l>
<c></c>
<c>* Calculate the mapping.(计算带矫正信息的图像)步骤二</c>
<c>*  </c>
<c>*(核心函数)标定相机参数，对步骤一的数据进行计算处理</c>
<l>camera_calibration (X, Y, Z, NRow, NCol, StartCamPar, NStartPose, 'all', CamParam, NFinalPose, Errors)</l>
<c>*生成空的对象：包含矫正映射信息的图像</c>
<l>gen_empty_obj (Maps)</l>
<c>*for循环一次处理一组对应的图像</c>
<l>for NumImage := 1 to NumImages by 1</l>
<c>* Obtain the pose of the calibration table.</c>
<c>*获取标定出来的位姿3D</c>
<l>Pose := NFinalPose[(NumImage-1)*7:(NumImage-1)*7+6]</l>
<c>*设置新的原始3D位姿</c>
<l>set_origin_pose (Pose, -1.125, -1.0, 0, PoseNewOrigin)</l>
<c>*(核心函数)生成带矫正映射信息的图像MapSingle</c>
<l>gen_image_to_world_plane_map (MapSingle, CamParam, PoseNewOrigin, 2048, 1536, 900, 800, 0.0025, 'bilinear')</l>
<c>*将单张图像加入图像元组Maps</c>
<l>concat_obj (Maps, MapSingle, Maps)</l>
<l>endfor</l>
<l>disp_continue_message (WindowHandle1, 'black', 'true')</l>
<l>stop ()</l>
<c>*代码到此处：有了NumImages张标定的原图 + NumImages张带矫正映射信息的图像,</c>
<c>*接下来While循环，一张一张的矫正图像</c>
<c>*  </c>
<c>* Map the images.(矫正图像)步骤三</c>
<c>*  </c>
<c>*窗口设置</c>
<l>dev_open_window (0, 391, 900/2, 800/2, 'black', WindowHandle2)</l>
<l>Button := 0</l>
<l>NumImage := 1</l>
<l>while (Button # 1)</l>
<l>    dev_set_window (WindowHandle1)</l>
<l>    dev_set_part (0, 0, 575, 767)</l>
<l>    dev_clear_window ()</l>
<c>    *从图像元组中选择一张图像</c>
<l>    select_obj (Images, Image, NumImage)</l>
<c>    *显示选择的图像</c>
<l>    dev_display (Image)</l>
<l>    disp_message (WindowHandle1, 'Press any mouse button to stop', 'image', -1, -1, 'black', 'true')</l>
<c>    *选择对应位置的带矫正信息的图像</c>
<l>    select_obj (Maps, MapSingle, NumImage)</l>
<c>    *(核心函数)矫正图像：原图，带矫正信息图，矫正结果图</c>
<l>    map_image (Image, MapSingle, ImageMapped)</l>
<c>    *以下为窗口、循环之类的处理，与图像处理没什么关系</c>
<l>    dev_set_window (WindowHandle2)</l>
<l>    dev_set_part (0, 0, 799, 899)</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (ImageMapped)</l>
<l>    NumImage := NumImage + 1</l>
<l>    if (NumImage &gt; NumImages)</l>
<l>        NumImage := 1</l>
<l>    endif</l>
<l>    dev_error_var (Error, 1)</l>
<l>    dev_set_check ('~give_error')</l>
<l>    get_mposition (WindowHandle1, R, C, Button)</l>
<l>    dev_error_var (Error, 0)</l>
<l>    dev_set_check ('give_error')</l>
<l>    if (Error#H_MSG_TRUE)</l>
<l>        Button := 0</l>
<l>    endif</l>
<l>    if (Button)</l>
<l>        break</l>
<l>    endif</l>
<l>endwhile</l>
<l>dev_set_window (WindowHandle2)</l>
<l>dev_close_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
